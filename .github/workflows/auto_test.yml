name: auto_test_ci

on: 
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 0 1 * *"
  

env:
  qemu-version: 7.1.0
  rust-toolchain: nightly


jobs:
  ci_test:
    name: Linux Application Image Test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # arch: [x86_64, riscv64, aarch64]
        arch: [riscv64,x86_64]
    env:
        ARCH: ${{matrix.arch}}
        FS: fat32 # or ext4
    steps:
      - uses: actions/checkout@v3


      - name: Add current date into a variable
        run: |
            COMMIT_TIME=$(date -d '+8 hour')
            echo "COMMIT_TIME=$COMMIT_TIME" >> $GITHUB_ENV

      - name: config.py key_value set
        shell: sh
        run: |
              cd pytest
              sed -i "s#\"测试架构\": .*#\"测试架构\": \"$my_ARCH\",#" config.py
              sed -i "s#\"提交者\": .*#\"提交者\": \"$my_GITHUB_ACTOR\",#" config.py
              sed -i "s#\"提交ID\": .*#\"提交ID\": \"$my_GITHUB_SHA\",#" config.py
              sed -i "s#\"提交时间\": .*#\"提交时间\": \"$my_COMMIT_TIME\",#" config.py
              sed -i "s#\"仓库名\": .*#\"仓库名\": \"$my_GITHUB_REPOSITORY\",#" config.py
              sed -i "s#\"分支名\": .*#\"分支名\": \"$my_GITHUB_REF_NAME\",#" config.py
              sed -i "s#\"工作目录\": .*#\"工作目录\": \"$my_GITHUB_WORKSPACE\"#" config.py
              sed -i "s#\"文件系统\": .*#\"文件系统\": \"$my_FS\"#" config.py
        env:
          my_ARCH: ${{ env.ARCH }}
          my_GITHUB_ACTOR: ${{ github.actor }}
          my_GITHUB_SHA: ${{ github.sha }}
          my_COMMIT_TIME: ${{ env.COMMIT_TIME }}
          my_GITHUB_REPOSITORY: ${{ github.repository }}
          my_GITHUB_REF_NAME: ${{ github.ref_name }}
          my_GITHUB_WORKSPACE: ${{ github.workspace }}
          my_FS: ${{env.FS}}
          


      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal                           # 使用 minimal 配置文件，这通常是一个轻量级的配置文件，可能只包含项目的基本信息。
          toolchain: ${{ env.rust-toolchain }}       # 表示使用环境变量 rust_toolchain 中指定的 Rust 工具链版本。 
          components: rust-src, llvm-tools-preview, rustfmt, clippy

      - name: install cargo-binutils
        run: cargo install cargo-binutils --force



      - name: Cache QEMU
        id: cache-qemu
        uses: actions/cache@v3
        with:
          path: qemu-${{ env.qemu-version }}
          key: qemu-${{ env.qemu-version }}

      - name: Install ninja-build
        run: sudo apt-get update && sudo apt-get install -y ninja-build


      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: Download and Compile QEMU
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: sudo chmod +x .github/scripts/make-qemu.sh && .github/scripts/make-qemu.sh ${{ env.qemu-version }}

      - name: Install QEMU
        run: |
          cd qemu-${{ env.qemu-version }} && sudo make install
          qemu-system-${{ matrix.arch }} --version

          
      - if: matrix.arch == 'riscv64'
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-binutils
          version: latest

      - name: Install dependence
        run: |
          sudo apt install openjdk-17-jdk
          sudo apt install nodejs
          wget https://registry.npmjs.org/allure-commandline/-/allure-commandline-2.24.1.tgz
          sudo mkdir allure-com
          sudo tar zxvf allure-commandline-2.24.1.tgz -C allure-com
          ls -lh
          sudo ln -s ${{github.workspace}}/allure-com/package/bin/allure /usr/bin/allure

      
      - name: install pytest
        run: |
          chmod -R 777 pytest/
          cd pytest
          sudo pip3 install -r ./requirements.txt -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com
      - name: os_test
        run: |
          cd pytest
          sudo python3 -m pytest -sv --alluredir report/result testcase/test_arceos.py --clean-alluredir


      - name: deal parrale  
        if: always()
        run: if [ "${{matrix.arch}}" = "riscv64" ]; then sleep 40; fi     
        
      - name: load allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages_ci
          path: gh-pages_ci
      
      - name: build report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          keep_reports: 1000
          gh_pages: gh-pages_ci
          allure_history: allure-history
          allure_results: ${{github.workspace}}/pytest/report/result
          subfolder: ${{matrix.arch}}
      


      - name: Publish report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages_ci
          publish_dir: allure-history
